import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CallbackContext
from database import(
    add_task, delete_task, get_tasks, start_session, stop_session,
    get_active_session, get_total_stat_last_7_days, get_stat_daily_day,
    get_task_stat_last_7_days, get_stat_task_daily_day
)
from enum import Enum, auto
from dashboard import generate_dashboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class State(Enum):
    WAITING_FOR_TASK_NAME = auto()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    WAITING_FOR_TASK_NUMBER = auto()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = [['‚ñ∂Ô∏è', '‚èπÔ∏è', 'üîÑ', '‚öôÔ∏è']]

    # –°–æ–∑–¥–∞–µ–º replay-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é ReplyKeyboardMarkup
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    start_message = f'''
        –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —Ç–∞–π–º-—Ç—Ä–µ–∫–µ—Ä –±–æ—Ç. –°–æ–∑–¥–∞–π —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –∏ –∑–∞–ø—É—Å—Ç–∏ —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏.
    '''
    await update.message.reply_text(start_message, reply_markup=reply_markup)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤—ã–∑–æ–≤–∞ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):

    keyboard = [
        [InlineKeyboardButton("      –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É üÜï     ", callback_data= 'add_task')],
        [InlineKeyboardButton("      –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É üóë     ", callback_data='delete_task')],
        [InlineKeyboardButton("      –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìã     ", callback_data='list_tasks')],
        [InlineKeyboardButton("      –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà     ", callback_data='stats')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text('–ú–µ–Ω—é:', reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_task
async def add_task_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    #–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    keyboard = [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    #–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    await query.edit_message_text('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:',reply_markup=reply_markup)
    return State.WAITING_FOR_TASK_NAME

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async def receive_task_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_name = update.message.text
    user_id = update.message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_task(user_id, task_name)
    await update.message.reply_text(f'–ó–∞–¥–∞—á–∞ "{task_name}" —Å–æ–∑–¥–∞–Ω–∞!‚úÖ')
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_task
async def delete_task_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    tasks = get_tasks(user_id)

    if not tasks:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    keyboard = [
        [InlineKeyboardButton(task['name'], callback_data=f"delete_{task['id']}")] for task in tasks
    ]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text('–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=reply_markup)
    return State.WAITING_FOR_TASK_NUMBER

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def receive_task_for_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    user_id = query.from_user.id
    task_id = int(query.data.split("_")[1])
    tasks = get_tasks(user_id)

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –ø–æ task_id
    task = next((task for task in tasks if task["id"] == task_id), None)

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    delete_task(user_id, task_id)

    await query.edit_message_text(f'–ó–∞–¥–∞—á–∞ "{task['name']}" —É–¥–∞–ª–µ–Ω–∞!‚ùå')
    return ConversationHandler.END

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await back_menu_handler(update, context)
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_tasks
async def list_tasks_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    tasks = get_tasks(user_id)

    if not tasks:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    #–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    tasks_list = "\n".join([f"{i + 1}. {task['name']}" for i, task in enumerate(tasks)])
    await query.edit_message_text(f"–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏üìã:\n{tasks_list}", reply_markup=reply_markup)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name
    message_text = f'''
    {user_name}, –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!
–ù–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è –∏ —É–¥–∞—á–∏ –∏ —Ç—ã —Å–æ –≤—Å–µ–º —Å–ø—Ä–∞–≤–∏—à—å—Å—è!
'''

    await update.message.reply_text(message_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_session
async def start_session_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    tasks = get_tasks(user_id)

    if not tasks:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    keyboard = [
        [InlineKeyboardButton(task['name'], callback_data=f"start_{task['id']}")] for task in tasks
    ]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_start")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text('–ü–æ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä?', reply_markup=reply_markup)
    return State.WAITING_FOR_TASK_NUMBER

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏
async def receive_task_for_start_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    user_id = query.from_user.id

    #–ú–µ—Ç–æ–¥–æ–º —Å–ø–ª–∏—Ç –∏ int() –¥–æ–±—ã–≤–∞–µ–º 'id'
    task_id = int(query.data.split("_")[1])

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
    if start_session(user_id, task_id):

        #–ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é, –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è 'name'
        active_session = get_active_session(user_id)
        await query.edit_message_text(f'–°–µ—Å—Å–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ "{active_session["name"]}" –∑–∞–ø—É—â–µ–Ω–∞!‚ñ∂Ô∏è')
    else:
        await query.edit_message_text("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è.")
    return ConversationHandler.END

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏
async def cancel_start_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await query.edit_message_text("–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω!")
    return ConversationHandler.END

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop_session
async def stop_session_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_session = get_active_session(user_id)

    if not active_session:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
        return

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = stop_session(user_id)

    if result:
        await update.message.reply_text(
                f'–°–µ—Å—Å–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ "{result["name"]}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: {result["time_diff"]}üö´')
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ /active_session
async def active_session_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_session = get_active_session(user_id)

    if not active_session:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
        return

    await update.message.reply_text(f'–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –∑–∞–¥–∞—á–∞ "{active_session["name"]}" üîÑ')

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º inline –º–µ–Ω—é
async def stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton('–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π', callback_data='total_stat_7')],
        [InlineKeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–µ –∑–∞ 7 –¥–Ω–µ–π', callback_data='total_stat_task_7')],
        [InlineKeyboardButton('üìä –û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥', callback_data='open_dashboard')],
        [InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=reply_markup)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é
async def back_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton('      –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É üÜï     ', callback_data='add_task')],
        [InlineKeyboardButton('      –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É üóë     ', callback_data='delete_task')],
        [InlineKeyboardButton('      –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üìã     ', callback_data='list_tasks')],
        [InlineKeyboardButton('      –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà     ', callback_data='stats')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text('–ú–µ–Ω—é:', reply_markup=reply_markup)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def handle_stats_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data == 'total_stat_7':
        stats = get_total_stat_last_7_days(user_id)
        daily_day = get_stat_daily_day(user_id)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='stats')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        days_info = "\n".join(
            f"‚Ä¢ {formatted_date}: {data['day_of_week']} ({data['active_time']})"
            for formatted_date, data in daily_day.items()
        )

        await query.edit_message_text(
            f"üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
            f"–û–±—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: {stats['total_time']}\n"
            f"C—Ä–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: {stats['avg_time']}\n\n"
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:\n{days_info}",reply_markup=reply_markup
            )

    elif query.data == 'total_stat_task_7':

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        tasks = get_tasks(user_id)

        if not tasks:
            await query.edit_message_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
            return ConversationHandler.END


        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
        keyboard = [
            [InlineKeyboardButton(task['name'], callback_data=f"stat_{task['id']}")] for task in tasks
        ]
        keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="stat")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(f"–î–ª—è –∫–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?", reply_markup=reply_markup)
        return State.WAITING_FOR_TASK_NUMBER

    elif query.data == "open_dashboard":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥"
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞—à–±–æ—Ä–¥.")
        await _handle_dashboard(query, context, user_id)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def _handle_dashboard(query, context, user_id):
   #–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞—à–±–æ—Ä–¥–∞.
    try:
        await query.delete_message()
        generating_message = await context.bot.send_message(
            chat_id=user_id,
            text="‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞..."
        )
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        images = generate_dashboard(user_id)
        if images:

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='cancel_dashboard')]
            ])
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_photo(
                chat_id=user_id,
                photo=images,
                caption="–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π",
                reply_markup = keyboard
            )
            images.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            await generating_message.delete()

        else:
            await context.bot.send_message(
                chat_id=user_id,
                text="üòû –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.\n–ü–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å —É—á–∏—Ç—å—Å—è!"
            )
            await generating_message.delete()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await generating_message.delete()

async def cancel_dashboard_handler(update, context):
    query = update.callback_query
    await query.answer()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—à–±–æ—Ä–¥–æ–º
    await query.delete_message()

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    keyboard = [
        [InlineKeyboardButton('–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π', callback_data='total_stat_7')],
        [InlineKeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–µ –∑–∞ 7 –¥–Ω–µ–π', callback_data='total_stat_task_7')],
        [InlineKeyboardButton('üìä –û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥', callback_data='open_dashboard')],
        [InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=reply_markup
    )

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–µ
async def handler_task_number_stat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ handler_task_number_stat –≤—ã–∑–≤–∞–Ω.")
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    task_id = int(query.data.split("_")[1])

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –ø–æ task_id
    tasks = get_tasks(user_id)
    task = next((task for task in tasks if task["id"] == task_id), None)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='stats')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    #–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stat = get_task_stat_last_7_days(user_id, task_id)
    stat_daily = get_stat_task_daily_day(user_id, task_id)

    days_info = "\n".join(
        f"‚Ä¢ {formatted_date}: {data['day_of_week']} ({data['active_time']})"
        for formatted_date, data in stat_daily.items()
    )

    logging.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {stat}")
    await query.edit_message_text(
        f'üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–µ "{task["name"]}" –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n'
        f'–û–±—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: {stat["total_time_task"]}\n'
        f'C—Ä–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: {stat["avg_time_task"]}\n\n'
        f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:\n{days_info}', reply_markup=reply_markup)

    return ConversationHandler.END

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def cancel_stat_task_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await stats_handler(update, context)
    return ConversationHandler.END
