from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import add_task, delete_task, get_tasks, start_session, stop_session, get_active_session, get_total_stat_last_7_days, get_stat_daily_day
from enum import Enum, auto

class State(Enum):
    WAITING_FOR_TASK_NAME = auto()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    WAITING_FOR_TASK_NUMBER = auto()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name
    start_message = f'''
        –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —Ç–∞–π–º-—Ç—Ä–µ–∫–µ—Ä –±–æ—Ç.
–°–æ–∑–¥–∞–π —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É –∏ –∑–∞–ø—É—Å—Ç–∏ —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏.
    '''
    await update.message.reply_text(start_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_task
async def add_task_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    return State.WAITING_FOR_TASK_NAME

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async def receive_task_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_name = update.message.text
    user_id = update.message.from_user.id

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_task(user_id, task_name)
    await update.message.reply_text(f'–ó–∞–¥–∞—á–∞ "{task_name}" —Å–æ–∑–¥–∞–Ω–∞!‚úÖ')
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_task
async def delete_task_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    tasks = get_tasks(user_id)

    if not tasks:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    tasks_list = "\n".join([f"{i + 1}. {task['name']}" for i, task in enumerate(tasks)])
    await update.message.reply_text(f"–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n{tasks_list}\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    return State.WAITING_FOR_TASK_NUMBER

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def receive_task_number_for_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    try:
        task_number = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return State.WAITING_FOR_TASK_NUMBER

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    tasks = get_tasks(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
    if task_number < 1 or task_number > len(tasks):
        await update.message.reply_text("–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return State.WAITING_FOR_TASK_NUMBER

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    task_id = tasks[task_number - 1]['id']
    delete_task(user_id, task_id)
    await update.message.reply_text(f'–ó–∞–¥–∞—á–∞ "{tasks[task_number - 1]["name"]}" —É–¥–∞–ª–µ–Ω–∞!‚ùå')
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_tasks
async def list_tasks_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    tasks = get_tasks(user_id)

    if not tasks:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    tasks_list = "\n".join([f"{i + 1}. {task['name']}" for i, task in enumerate(tasks)])
    await update.message.reply_text(f"–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏üìã:\n{tasks_list}")

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.from_user.first_name
    message_text = f'''
    {user_name}, –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!
–ù–µ–º–Ω–æ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏—è –∏ —É–¥–∞—á–∏ –∏ —Ç—ã —Å–æ –≤—Å–µ–º —Å–ø—Ä–∞–≤–∏—à—å—Å—è!
'''

    await update.message.reply_text(message_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_session
async def start_session_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    tasks = get_tasks(user_id)

    if not tasks:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    tasks_list = "\n".join([f"{i + 1}. {task['name']}" for i, task in enumerate(tasks)])
    await update.message.reply_text(f"–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n{tasks_list}\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏:")
    return State.WAITING_FOR_TASK_NUMBER

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏
async def receive_task_number_for_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    try:
        task_number = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return State.WAITING_FOR_TASK_NUMBER

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    tasks = get_tasks(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
    if task_number < 1 or task_number > len(tasks):
        await update.message.reply_text("–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return State.WAITING_FOR_TASK_NUMBER

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
    task_id = tasks[task_number - 1]['id']
    if start_session(user_id, task_id):
        await update.message.reply_text(f'–°–µ—Å—Å–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ "{tasks[task_number - 1]["name"]}" –∑–∞–ø—É—â–µ–Ω–∞!‚ñ∂Ô∏è')
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è.")
    return ConversationHandler.END

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop_session
async def stop_session_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_session = get_active_session(user_id)

    if not active_session:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
        return

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = stop_session(user_id)

    if result:
        await update.message.reply_text(
                f'–°–µ—Å—Å–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ "{result["name"]}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: {result["time_diff"]}üö´')
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ /active_session
async def active_session_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_session = get_active_session(user_id)

    if not active_session:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
        return

    await update.message.reply_text(f'–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –∑–∞–¥–∞—á–∞ "{active_session["name"]}" ‚úÖ')

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º inline –º–µ–Ω—é
async def stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π", callback_data="total_stat_7")],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞ 7 –¥–Ω–µ–π", callback_data="avg_time_7")],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –∑–∞ 7 –¥–Ω–µ–π", callback_data="daily_stats_7")],
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–∏–æ–¥", callback_data="custom_period")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=reply_markup)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def handle_stats_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data == "total_stat_7":
        stats = get_total_stat_last_7_days(user_id)
        daily_day = get_stat_daily_day(user_id)

        days_info = "\n".join(
            f"‚Ä¢ {formatted_date}: {data['day_of_week']} ({data['active_time']})"
            for formatted_date, data in daily_day.items()
        )

        await query.edit_message_text(
            f"üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
            f"–û–±—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: {stats['total_time']}\n"
            f"C—Ä–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: {stats['avg_time']}\n\n"
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º:\n{days_info}"
            )
    # elif query.data == "avg_time_7":
    #     stats = get_avg_time_last_7_days(user_id)
    #     await query.edit_message_text(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {stats}")
    # elif query.data == "daily_stats_7":
    #     stats = get_daily_stats_last_7_days(user_id)
    #     await query.edit_message_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n{stats}")
    # elif query.data == "custom_period":
    #     await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7, 14, 30):")
    #     return State.WAITING_FOR_PERIOD